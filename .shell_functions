##-------------------------------------------------------------
## Functions
##-------------------------------------------------------------

## Extracts any archive(s) (if unp isn't installed)
extract() {
	for archive in $*; do
		if [ -f $archive ]; then
			case $archive in
			*.tar.bz2) tar xvjf $archive ;;
			*.tar.gz) tar xvzf $archive ;;
			*.bz2) bunzip2 $archive ;;
			*.rar) rar x $archive ;;
			*.gz) gunzip $archive ;;
			*.tar) tar xvf $archive ;;
			*.tbz2) tar xvjf $archive ;;
			*.tgz) tar xvzf $archive ;;
			*.zip) unzip $archive ;;
			*.Z) uncompress $archive ;;
			*.7z) 7z x $archive ;;
			*) echo "don't know how to extract '$archive'..." ;;
			esac
		else
			echo "'$archive' is not a valid file!"
		fi
	done
}

## Searches for text in all files in the current folder
ftext() {
	# -i case-insensitive
	# -I ignore binary files
	# -H causes filename to be printed
	# -r recursive search
	# -n causes line number to be printed
	# optional: -F treat search term as a literal, not a regular expression
	# optional: -l only print filenames and not the matching lines ex. grep -irl "$1" *
	grep -iIHrn --color=always "$1" . | less -r
}

## Copy and go to the directory
cpg() {
	if [ -d "$2" ]; then
		cp $1 $2 && cd $2
	else
		cp $1 $2
	fi
}

## Move and go to the directory
mvg() {
	if [ -d "$2" ]; then
		mv $1 $2 && cd $2
	else
		mv $1 $2
	fi
}

## Create and go to the directory
mkdirg() {
	mkdir -p $1
	cd $1
}

## Goes up a specified number of directories  (i.e. up 4)
up() {
	local d=""
	limit=$1
	for ((i = 1; i <= limit; i++)); do
		d=$d/..
	done
	d=$(echo $d | sed 's/^\///')
	if [ -z "$d" ]; then
		d=..
	fi
	cd $d
}

## Show current network information
netinfo() {
	IP_IS_PRESENT="$(command -v ip &>/dev/null && echo 1)"

	if [ ! "$IP_IS_PRESENT" ]; then
		echo "The ip command isn't available in the current environment. It's missing from \$PATH"
		exit 130
	fi

	ifNames=$(ip -j link | jq -r '.[].ifname | select(. != "lo")')
	for i in $ifNames; do
		IP_ADDRESS="$(/usr/sbin/ip -4 a show $i | awk /'inet/ {print $2}' | cut -d/ -f1)"
		MAC_ADDRESS="$(/usr/sbin/ip -4 link show $i | awk /'link/ {print $2}')"

		echo
		echo "--- Network Information ----"
		echo -e "Device :  "$i
		echo -e "Address:  "$IP_ADDRESS
		echo -e "MACAddr:  "$MAC_ADDRESS
		echo "----------------------------"
	done
}

## IP address lookup
whatsmyip() {

	IP_IS_PRESENT="$(command -v ip &>/dev/null && echo 1)"
	EXTERNAL_IP="$(curl -s https://ipecho.net/plain)"

	if [ ! "$IP_IS_PRESENT" ]; then
		echo "The ip command isn't available in the current environment. It's missing from \$PATH"
		exit 130
	fi

	ifNames=$(ip -j link | jq -r '.[].ifname | select(. != "lo")')

	echo

	# Internal IP Lookup
	for i in $ifNames; do
		IP_ADDRESS="$(/usr/sbin/ip -4 a show $i | awk /'inet/ {print $2}' | cut -d/ -f1)"

		echo -e "Internal IP:\t$IP_ADDRESS\t($i)"
	done

	# External IP Lookup
	echo -e "External IP:\t$EXTERNAL_IP"
}

## This is used to check if an application is installed and in $PATH by checking its version and returns 1 if present.
## Example - isPresent apt
isPresent() {
	command -v "$1" &>/dev/null && echo 1
}
